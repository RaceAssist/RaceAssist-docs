openapi: "3.0.3"
info:
  title: "RaceAssist API"
  description: "RaceAssist API"
  version: "1.0.0"
servers:
- url: "https://RaceAssist"
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /bet/available/{raceId}:
    get:
      description: ""
      parameters:
      - name: "raceId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing id"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Race not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /bet/jockeys/{raceId}:
    get:
      description: ""
      parameters:
      - name: "raceId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing id"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Race not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /bet/push/{raceId}:
    post:
      description: ""
      parameters:
      - name: "raceId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/BetData"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing id"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Race not found"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing or invalid jwt token"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /hello:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /horse/{uuid}:
    get:
      description: ""
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing id"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Horse not found"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
  /login:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/UserData"
        required: true
      responses:
        "401":
          description: "Unauthorized <br> 401"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Password is incorrect"
                Example#2:
                  value: "This player is not registered"
                Example#3:
                  value: "This player has never played before"
        "403":
          description: "Forbidden <br> 403"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "This player is banned"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /place/config/{placeId}:
    get:
      description: ""
      parameters:
      - name: "placeId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing id"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Place not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
    post:
      description: ""
      parameters:
      - name: "placeId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/PlaceConfig"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing or invalid jwt token"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing id"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Place not found"
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "You do not have permission to edit this place"
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Success"
  /place/list:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /race/config/{raceId}:
    get:
      description: ""
      parameters:
      - name: "raceId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing id"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Race not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/RaceConfig"
    post:
      description: ""
      parameters:
      - name: "raceId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RaceConfig"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing or invalid jwt token"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing id"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Race not found"
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "You do not have permission to edit this place"
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Success"
  /race/list:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /refresh:
    post:
      description: ""
      responses:
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing or invalid jwt token"
                Example#2:
                  value: "Missing or invalid jwt token"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
components:
  schemas:
    BetDataUnit:
      type: "object"
      properties:
        jockeyUniqueId:
          type: "string"
          format: "uuid"
        multiple:
          type: "integer"
          format: "int32"
    BetData:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/BetDataUnit"
    UserData:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
    Rectangle:
      type: "object"
      properties:
        x:
          type: "integer"
          format: "int32"
        "y":
          type: "integer"
          format: "int32"
        width:
          type: "integer"
          format: "int32"
        height:
          type: "integer"
          format: "int32"
    Polygon:
      type: "object"
      properties:
        npoints:
          type: "integer"
          format: "int32"
        xpoints:
          type: "array"
          items:
            type: "integer"
            format: "int32"
        ypoints:
          type: "array"
          items:
            type: "integer"
            format: "int32"
        bounds:
          $ref: "#/components/schemas/Rectangle"
    OfflinePlayer:
      type: "object"
      properties: {}
    PlaceConfig:
      type: "object"
      properties:
        placeId:
          type: "string"
        placeName:
          type: "string"
        centralX:
          type: "integer"
          format: "int32"
        centralY:
          type: "integer"
          format: "int32"
        goalDegree:
          type: "integer"
          format: "int32"
        reverse:
          type: "boolean"
        inside:
          $ref: "#/components/schemas/Polygon"
        outside:
          $ref: "#/components/schemas/Polygon"
        image:
          type: "string"
        owner:
          $ref: "#/components/schemas/OfflinePlayer"
        staff:
          $ref: "#/components/schemas/OfflinePlayer"
    BetConfig:
      type: "object"
      properties:
        available:
          type: "boolean"
        returnPercent:
          type: "integer"
          format: "int32"
        spreadSheetId:
          type: "string"
        betUnit:
          type: "integer"
          format: "int32"
        autoReturn:
          type: "boolean"
        money:
          type: "number"
          format: "double"
    RaceConfig:
      type: "object"
      properties:
        raceId:
          type: "string"
        raceName:
          type: "string"
        placeId:
          type: "string"
        betConfig:
          $ref: "#/components/schemas/BetConfig"
        owner:
          $ref: "#/components/schemas/OfflinePlayer"
        staff:
          $ref: "#/components/schemas/OfflinePlayer"
        jockeys:
          $ref: "#/components/schemas/OfflinePlayer"
        lap:
          type: "integer"
          format: "int32"
        replacement:
          type: "string"
          format: "uuid"
        horse:
          type: "string"
          format: "uuid"